Unused form login

import React, { useState, useEffect } from 'react';
import './form.css'; // Import CSS file if you have one
import google from '../../asstes/images/google.png';
import { GoogleLogin } from '@react-oauth/google';
import { jwtDecode } from "jwt-decode";
import Slider from '../../components/slider/Slider';

export default function Form() {
    const [rightSlider, setRightSlider] = useState(false);
    const [animeSlider, setAnimeSlider] = useState(false);
    const [showSignupForm, setShowSignupForm] = useState(true); // Initially show the signup form
    const [showLoginForm, setshowLoginForm] = useState(true); // Initially show the signup form

    const handleLoginHereClick = () => {
        setAnimeSlider(true);
        setTimeout(() => {
            setRightSlider(true);
            setShowSignupForm(false); // Hide the signup form after 700ms
            setshowLoginForm(true)
            console.log('login');
        }, 700);
    };

    const SignupHereClick = () => {
        setAnimeSlider(false);
        setTimeout(() => {
            setRightSlider(false);
            setShowSignupForm(true); // Show the signup form after 700ms
            setshowLoginForm(false)
        }, 700);
        console.log('signup');
    };

    useEffect(()=>{
        setShowSignupForm(true);
        setshowLoginForm(false);
    })

    return (
        <>
            <div className='form-container'>
                {/* SignUp Form */}
                {showSignupForm && ( // Only render the signup form if showSignupForm state is true
                    <div className='signup-form form'>
                        <div className='form-content'>
                            <div>
                                <h2>Get Started with Star Taskz</h2>
                                <p>Manage you task more efficiently</p>
                            </div>
                            <div className='main-form'>
                                <form action="" className='input-fields'>
                                    <div className='input'>
                                        <p>Name</p>
                                        <input type="text" placeholder='Full Name' />
                                    </div>
                                    <div className='input'>
                                        <p>Email</p>
                                        <input type="email" placeholder='Email' />
                                    </div>
                                    <div className='input'>
                                        <p>Password</p>
                                        <input type="password" placeholder='Password' />
                                    </div>
                                    <input type="submit" value="Create Account" />
                                </form>
                                <div className='option'>
                                    <hr /> <p>or register with</p> <hr />
                                </div>
                                <button>
                                    <img src={google} alt="" />
                                    <p>Sign up with Google</p>
                                </button>
                            </div>
                            <div className='have-acct'>
                                <p>Already have an account?</p>
                                <button onClick={handleLoginHereClick}>
                                    <p>Login Here</p>
                                </button>
                            </div>
                        </div>
                    </div>
                )}

                {/* Login Form */}
                {showLoginForm && ( <div className='login-form form'>
                    <div className='form-content'>
                        <div>
                            <h2>Login to Star Taskz</h2>
                            <p>Don't you have some pending taskz?</p>
                        </div>
                        <div className='main-form'>
                            <form action="" className='input-fields'>
                                <div className='input'>
                                    <p>Email</p>
                                    <input type="email" placeholder='Email' />
                                </div>
                                <div className='input'>
                                    <p>Password</p>
                                    <input type="password" placeholder='Password' />
                                </div>
                                <input type="submit" value="Create Account" />
                            </form>
                            <div className='option'>
                                <hr /> <p>or login with</p> <hr />
                            </div>
                            <button>
                                <img src={google} alt="" />
                                <p>Sign in with Google</p>
                            </button>
                        </div>
                        <div className='have-acct'>
                            <p>Are you new?</p>
                            <button onClick={SignupHereClick}>
                                <p>Create Account</p>
                            </button>
                        </div>
                    </div>
                </div>
                )}
                {/* <div className={`anime-slider ${animeSlider ? 'anime-left' : 'anime-right'}`}>
                </div>
                <div className={`slider-container ${rightSlider ? 'left' : 'right'}`}>
                    <Slider />
                </div> */}
            </div>
        </>
    );
}




=========================================================

{menuLinks.map((link, index) => (
    <li className="nav-link" key={index} onClick={() => setIsSidebarClosed(false)}>
        <a href="#">
            {/* <i className={`bx ${link.icon} icon`}></i> */}
            <span className="text nav-text">{link.text}</span>
        </a>
    </li>
))}


===================================================================================

Working Carlender 1

import React, { useState, useEffect, useRef } from 'react';
import './calendar.css';
import arrowLeft from '../../asstes/icons/arrowLeft.svg';
import arrowRight from '../../asstes/icons/arrowRight.svg';
import WeatherInfo from './WeatherInfo';
// import { useCalendarContext } from '../../../hooks/CalendarContext';

const daysOfWeek = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];
const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
];

function Calendar() {
    const isMounted = useRef(false);
    const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());
    const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
    const [currentDate, setCurrentDate] = useState(new Date().getDate());
    const [weatherData, setWeatherData] = useState({});
    const [hoveredDate, setHoveredDate] = useState(null);
    const [weatherDataFetched, setWeatherDataFetched] = useState(false);
    const [selectedWeatherInfo, setSelectedWeatherInfo] = useState('');
    const [mounted, setMounted] = useState(false);
    // const { calendarData, setCalendarData } = useCalendarContext();
    // const { providerCurrentDay, providerCurrentDate, providerWeatherIcon, providerWeatherInfo } = calendarData;

    const prevMonth = () => {
        setCurrentMonth(prevMonth => (prevMonth === 0 ? 11 : prevMonth - 1));
        setCurrentYear(prevYear => (currentMonth === 0 ? prevYear - 1 : prevYear));
        setCurrentDate(new Date().getDate()); // Reset current date when changing month
    };

    const nextMonth = () => {
        setCurrentMonth(nextMonth => (nextMonth === 11 ? 0 : nextMonth + 1));
        setCurrentYear(nextYear => (currentMonth === 11 ? nextYear + 1 : nextYear));
        setCurrentDate(new Date().getDate()); // Reset current date when changing month
    };

    const daysInMonth = (month, year) => {
        return new Date(year, month + 1, 0).getDate();
    };

    const firstDayOfMonth = (month, year) => {
        return new Date(year, month, 1).getDay();
    };

    const renderCalendar = () => {
        const totalDays = daysInMonth(currentMonth, currentYear);
        const startingDay = firstDayOfMonth(currentMonth, currentYear);
        const today = new Date();
        const currentMonthYear = today.getFullYear() === currentYear && today.getMonth() === currentMonth;

        // Dates from previous month
        const previousMonthDays = [];
        const previousMonth = currentMonth === 0 ? 11 : currentMonth - 1;
        // const previousMonthYear = currentMonth === 0 ? currentYear - 1 : currentYear;
        // const daysInPreviousMonth = daysInMonth(previousMonth, previousMonthYear);
        // for (let i = startingDay - 1; i >= 0; i--) {
        //     previousMonthDays.push({ day: daysInPreviousMonth - i, isCurrentMonth: false });
        // }

        // Dates from current month
        const currentMonthDays = Array.from({ length: totalDays }, (_, index) => ({
            day: index + 1,
            isCurrentMonth: true
        }));

        // Dates from next month
        const nextMonthDays = [];
        const nextMonth = currentMonth === 11 ? 0 : currentMonth + 1;
        const nextMonthYear = currentMonth === 11 ? currentYear + 1 : currentYear;
        // const remainingDays = 7 - (previousMonthDays.length + currentMonthDays.length) % 7;
        // for (let i = 1; i <= remainingDays; i++) {
        //     nextMonthDays.push({ day: i, isCurrentMonth: false });
        // }

        const allDays = [...previousMonthDays, ...currentMonthDays, ...nextMonthDays];

        return allDays.map((day, index) => {
            const classNames = ["day"];
            if (!day.isCurrentMonth) {
                classNames.push("other-month");
            } else if (currentMonthYear && day.day === today.getDate()) {
                classNames.push("current-date");
            }

            const currentDate = new Date(currentYear, currentMonth, day.day);
            const dateString = currentDate.toDateString();
            const weatherInfo = weatherData[dateString] && weatherData[dateString].weather.length > 0
                ? weatherData[dateString].weather[0].main
                : '';

            const handleMouseEnter = () => {
                setHoveredDate(new Date(currentDate));
                setSelectedWeatherInfo(weatherInfo);
            };

            const handleMouseLeave = () => {
                setHoveredDate(null);
                setSelectedWeatherInfo('');
            };

            return (
                <div
                    key={`day-${index}`}
                    className={classNames.join(" ")}
                    onMouseEnter={handleMouseEnter}
                    onMouseLeave={handleMouseLeave}
                >
                    {day.day}
                    {hoveredDate && hoveredDate.toDateString() === currentDate.toDateString() && (
                        <WeatherInfo weatherInfo={selectedWeatherInfo} />
                    )}
                </div>
            );
        });
    };

    useEffect(() => {
        if (!mounted) {
            const fetchWeatherData = async () => {
                try {
                    const daysInCurrentMonth = daysInMonth(currentMonth, currentYear);
                    const firstDayOfCurrentMonth = new Date(currentYear, currentMonth, 1);

                    const weatherDataForMonth = {};

                    for (let i = 0; i < daysInCurrentMonth; i++) {
                        const date = new Date(firstDayOfCurrentMonth);
                        date.setDate(date.getDate() + i);

                        // Check if the date is from the current month
                        const isCurrentMonth = date.getMonth() === currentMonth;

                        // Retrieve latitude and longitude from local storage
                        const latitude = parseFloat(localStorage.getItem('latitude'));
                        const longitude = parseFloat(localStorage.getItem('longitude'));

                        // Fetch weather data only for dates in the current month
                        if (isCurrentMonth) {
                            const apiKey = '55a2443648a1fec91d831eb470f33fd0';
                            const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=${apiKey}&dt=${Math.floor(date.getTime() / 1000)}`;

                            const response = await fetch(apiUrl);
                            if (response.ok) {
                                const data = await response.json();
                                weatherDataForMonth[date.toDateString()] = data;
                                console.log('Calendar', data);
                            } else {
                                console.error('Error fetching weather data:', response.statusText);
                            }
                        }
                    }

                    setWeatherData(weatherDataForMonth);
                    setWeatherDataFetched(true);
                    setMounted(true);
                } catch (error) {
                    console.error('Error fetching weather data:', error);
                }
            };

            navigator.geolocation.getCurrentPosition(
                (position) => {
                    fetchWeatherData();
                },
                (error) => {
                    console.error('Error getting location:', error);
                    alert('Unable to get your location. Please allow location access for this feature.');
                }
            );
        }
    }, [currentMonth, currentYear, weatherDataFetched, mounted]);


    return (
        <div className="calendar">
            <div className="navigation">
                <button onClick={prevMonth}>
                    <img src={arrowLeft} />
                </button>
                <div className="current-month">{`${monthNames[currentMonth]} ${currentYear}`}</div>
                <button onClick={nextMonth}>
                    <img src={arrowRight} />
                </button>
            </div>
            <div className="days-of-week">
                {daysOfWeek.map((day, index) => (
                    <div key={`day-${index}`} className="day-of-week">
                        {day}
                    </div>
                ))}
            </div>
            <div className="dates">
                {renderCalendar()}
            </div>
        </div>
    );
}


====================================================================

Working carlendar 2 with previous and next month date 

import React, { useState, useEffect, useRef } from 'react';
import './calendar.css';
import arrowLeft from '../../asstes/icons/arrowLeft.svg';
import arrowRight from '../../asstes/icons/arrowRight.svg';
import WeatherInfo from './WeatherInfo';

const daysOfWeek = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];
const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
];

function Calendar() {
    const isMounted = useRef(false);
    const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());
    const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
    const [weatherData, setWeatherData] = useState({});
    const [hoveredDate, setHoveredDate] = useState(null);
    const [weatherDataFetched, setWeatherDataFetched] = useState(false);
    const [selectedWeatherInfo, setSelectedWeatherInfo] = useState('');
    const [mounted, setMounted] = useState(false);

    const prevMonth = () => {
        setCurrentMonth(prevMonth => (prevMonth === 0 ? 11 : prevMonth - 1));
        setCurrentYear(prevYear => (currentMonth === 0 ? prevYear - 1 : prevYear));
    };

    const nextMonth = () => {
        setCurrentMonth(nextMonth => (nextMonth === 11 ? 0 : nextMonth + 1));
        setCurrentYear(nextYear => (currentMonth === 11 ? nextYear + 1 : nextYear));
    };

    const daysInMonth = (month, year) => {
        return new Date(year, month + 1, 0).getDate();
    };

    const firstDayOfMonth = (month, year) => {
        return new Date(year, month, 1).getDay();
    };

    const renderCalendar = () => {
        const totalDays = daysInMonth(currentMonth, currentYear);
        const startingDay = firstDayOfMonth(currentMonth, currentYear);
        const today = new Date();

        const calendarArray = [];

        // Dates from previous month
        const previousMonth = currentMonth === 0 ? 11 : currentMonth - 1;
        const previousMonthYear = currentMonth === 0 ? currentYear - 1 : currentYear;
        const daysInPreviousMonth = daysInMonth(previousMonth, previousMonthYear);
        for (let i = startingDay - 1; i >= 0; i--) {
            const date = daysInPreviousMonth - i;
            const currentDate = new Date(previousMonthYear, previousMonth, date);
            calendarArray.push({ date: currentDate, day: date, isCurrentMonth: false });
        }

        // Dates from current month
        for (let i = 1; i <= totalDays; i++) {
            const currentDate = new Date(currentYear, currentMonth, i);
            calendarArray.push({ date: currentDate, day: i, isCurrentMonth: true });
        }

        // Dates from next month
        const nextMonth = currentMonth === 11 ? 0 : currentMonth + 1;
        const nextMonthYear = currentMonth === 11 ? currentYear + 1 : currentYear;
        const remainingDays = 7 - (calendarArray.length % 7);
        for (let i = 1; i <= remainingDays; i++) {
            const currentDate = new Date(nextMonthYear, nextMonth, i);
            calendarArray.push({ date: currentDate, day: i, isCurrentMonth: false });
        }

        return calendarArray;
    };

    useEffect(() => {
        if (!mounted) {
            const fetchWeatherData = async () => {
                try {
                    const daysInCurrentMonth = daysInMonth(currentMonth, currentYear);
                    const firstDayOfCurrentMonth = new Date(currentYear, currentMonth, 1);

                    const weatherDataForMonth = {};

                    for (let i = 0; i < daysInCurrentMonth; i++) {
                        const date = new Date(firstDayOfCurrentMonth);
                        date.setDate(date.getDate() + i);

                        // Check if the date is from the current month
                        const isCurrentMonth = date.getMonth() === currentMonth;

                        // Retrieve latitude and longitude from local storage
                        const latitude = parseFloat(localStorage.getItem('latitude'));
                        const longitude = parseFloat(localStorage.getItem('longitude'));

                        // Fetch weather data only for dates in the current month
                        if (isCurrentMonth) {
                            const apiKey = '55a2443648a1fec91d831eb470f33fd0';
                            const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=${apiKey}&dt=${Math.floor(date.getTime() / 1000)}`;

                            const response = await fetch(apiUrl);
                            if (response.ok) {
                                const data = await response.json();
                                weatherDataForMonth[date.toDateString()] = data;
                                console.log('Calendar', data);
                            } else {
                                console.error('Error fetching weather data:', response.statusText);
                            }
                        }
                    }

                    setWeatherData(weatherDataForMonth);
                    setWeatherDataFetched(true);
                    setMounted(true);
                } catch (error) {
                    console.error('Error fetching weather data:', error);
                }
            };

            navigator.geolocation.getCurrentPosition(
                (position) => {
                    fetchWeatherData();
                },
                (error) => {
                    console.error('Error getting location:', error);
                    alert('Unable to get your location. Please allow location access for this feature.');
                }
            );
        }
    }, [currentMonth, currentYear, weatherDataFetched, mounted]);

    const handleMouseEnter = (date) => {
        setHoveredDate(date);
        setSelectedWeatherInfo(weatherData[date.toDateString()].weather[0].main);
    };

    const handleMouseLeave = () => {
        setHoveredDate(null);
        setSelectedWeatherInfo('');
    };

    return (
        <div className="calendar">
            <div className="navigation">
                <button onClick={prevMonth}>
                    <img src={arrowLeft} alt="Previous Month" />
                </button>
                <div className="current-month">{`${monthNames[currentMonth]} ${currentYear}`}</div>
                <button onClick={nextMonth}>
                    <img src={arrowRight} alt="Next Month" />
                </button>
            </div>
            <div className="days-of-week">
                {daysOfWeek.map((day, index) => (
                    <div key={`day-${index}`} className="day-of-week">
                        {day}
                    </div>
                ))}
            </div>
            <div className="dates">
                {renderCalendar().map((day, index) => (
                    <div
                        key={`day-${index}`}
                        className={day.isCurrentMonth ? 'day' : 'day other-month'}
                        onMouseEnter={() => handleMouseEnter(day.date)}
                        onMouseLeave={handleMouseLeave}
                    >
                        {day.day}
                        {hoveredDate && hoveredDate.toDateString() === day.date.toDateString() && (
                            <WeatherInfo weatherInfo={selectedWeatherInfo} />
                        )}
                    </div>
                ))}
            </div>
        </div>
    );
}

export default Calendar;
